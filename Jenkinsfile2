pipeline {
    agent { label 'master' }
	options { skipDefaultCheckout() }
	stages {
				stage('Unit Test') {
						steps {
								echo 'Clean Build'
								cleanWs()
								checkout scm
              							gitHubPRStatus githubPRMessage('${GITHUB_PR_COND_REF}runstarted')
								
								sh "ls"
								sh "pwd"
								sh 'mvn clean'
								 
						}
				}
	    
				stage('Build and Package') {
					//agent { label 'windows' }
						steps {
								echo 'Clean Build'
								cleanWs()
								//checkout scm
								sh "ls"
								sh "pwd"
								//sh "mvn clean"
                
								//sh "mvn sonar:sonar clean compile package -Dtest=\\!TestRunner* -DfailIfNoTests=false -Dsonar.projectKey=CrudApp -Dsonar.host.url=http://10.62.125.9:8085/ -Dsonar.login=f16fabd2605044f38e79e4c0e4bc5f73c55dd144"
								 
						}
				}
        
    }
    
    post {
           success {
                             
                // CHANGE_ID is set only for pull requests, so it is safe to access the pullRequest global variable
		//githubPRComment comment: githubPRMessage('Build ${BUILD_NUMBER} ${BUILD_STATUS}'), statusVerifier: allowRunOnStatus('SUCCESS')
               script { 
	       		pullRequest.addLabel('BUILD SUCCESS')
	       		pullRequest.createStatus(status: 'success',
                         context: 'Jenkins',
                         description: "${BUILD_TAG} ${JOB_NAME}",
                         targetUrl: "${env.JOB_URL}${env.BUILD_NUMBER}/testResults")
			 gitHubPRStatus githubPRMessage(" SUCCESS ${BUILD_TAG}")
	       		//withCredentials([usernamePassword(credentialsId: 'githubtoken', passwordVariable: 'git-key', usernameVariable: 'git_user')]) {
                      	//pullRequest.setCredentials('tonysandeep', 'Qwerty0420')
                      pullRequest.review(user: "tonysandeep", body: "APPROVED FROM $JOB_NAME", state: "One of APPROVED")
		     //setGitHubPullRequestStatus context: 'BUILDER', message: 'Hey YOU CAN Merge', state: 'SUCCESS'  
                
		}            
        }
    
     failure {
            	script {
	    	//githubPRComment comment: githubPRMessage('Build ${BUILD_NUMBER} ${BUILD_STATUS}'), errorHandler: statusOnPublisherError('FAILURE'), statusVerifier: allowRunOnStatus('FAILURE')
                // CHANGE_ID is set only for pull requests, so it is safe to access the pullRequest global variable
		
		pullRequest.createStatus(status: 'failure',
                         context: 'jenkins',
                         description: "Failed ${BUILD_TAG} ${JOB_NAME}",
                         targetUrl: "${env.JOB_URL}/testResults")
         	gitHubPRStatus githubPRMessage(" Failure ${BUILD_TAG}")
                     pullRequest.addLabel("$BUILD_TAG failed") }
                
            
        }
    }
} 
