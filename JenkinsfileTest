pipeline {
    agent { label 'master' }
	options { skipDefaultCheckout() }
	stages {
				stage('Unit Test') {
						steps {
								echo 'Clean Build'
								cleanWs()
								checkout scm
								sh "ls"
								sh "pwd"
								sh 'mvn clean'
								 
						}
				}
	    
				stage('Build and Package') {
					agent { label 'windows' }
						steps {
								echo 'Clean Build'
								cleanWs()
								checkout scm
								sh "ls"
								sh "pwd"
								sh "mvn clean package -DskipTests"
								//sh "mvn sonar:sonar clean compile package -Dtest=\\!TestRunner* -DfailIfNoTests=false -Dsonar.projectKey=CurdApp -Dsonar.host.url=http://10.62.125.9:8085/ -Dsonar.login=f16fabd2605044f38e79e4c0e4bc5f73c55dd144"
								 
						}
				}
				
				stage("XLDeploy Package") {
					agent { label 'windows' }
				steps {
					sh "sed -i 's/{{PACKAGE_VERSION}}/$BUILD_NUMBER/g' deployit-manifest.xml"
					sh "sed -i 's/{{Deploy-App}}/CurdApp/g' deployit-manifest.xml"
					xldCreatePackage artifactsPath: 'target', manifestPath: 'deployit-manifest.xml', darPath: "$BUILD_NUMBER.0.dar"
					
				}
			}
	    
	    		stage('XLDeploy Publish') {  
				agent { label 'windows' }
				steps {
					xldPublishPackage serverCredentials: 'XLDeployServer', darPath: "$BUILD_NUMBER.0.dar"
				}
			}
			
			/*stage('Request to Pull Changes') {
				  when {
					 		branch 'dev'
					 }
                		steps {

                        			sh "hub pull-request -m '${BUILD_TAG}' -b master -h dev"

               			 }

            		}*/
		     	
			/*stage('XL Release') {
				  when {
					 		branch 'dev'
					 }
				agent { label 'windows' }
                		steps {

                        	xlrCreateRelease releaseTitle: 'Release for $BUILD_TAG', serverCredentials: 'XLReleaseServer', startRelease: true, template: 'Demo/ReleaseTemplate-1.0', variables: [[propertyName: 'Version', propertyValue: "$BUILD_NUMBER.0"], [propertyName: 'Environment', propertyValue: 'QATomcatENv']]

               			 }

            		}*/

				stage('Test Automation') {
				 	 when {
					   anyOf { branch 'PR*' }
					   not {
					 		branch 'master'
					    }
					 }
					steps {
									echo "test phase"
						}
					}
					
					
				stage('Merge the PR Locally') {
				 	 when {
					   	branch 'PR*'
					 }
					steps {
						sh "git checkout -b pullrequest"						
						sh "git fetch origin master:master"					
						sh "git checkout master"
						echo 'checking local merge to master'
						sh "git merge pullrequest"
						//sh "git pull upstream master && git push origin 'PR/4'"
						//sh "git checkout 'PR/4'"
						//sh "git rebase master"
						//sh "git push -f origin master"
						}
					}
				
				stage('Approve the PR request') {
				 	 when {
					   	branch 'PR*'
					 }
					steps {
						echo "Approve"

					}
				}				

				/* stage('Release Approval') {
					 when {
					 branch 'master'
					 }
					steps {
						echo 'Confirm the deployment'
						echo "waiting for approval"
						timeout( time: 120, unit: "SECONDS" ){
						input 'Do you want to proceed to the Deployment?'
						//milestone 1
									}
						}
					} */

					stage('Staging Release version') {
						when {
							 branch 'master'
						 }						
					    steps {
							echo 'set version to Release'
						script{
								def releasedVersion = getReleaseVersion()
								print releasedVersion
								sh "mvn versions:set -DnewVersion=${releasedVersion}-RELEASE"
								echo "commit the release version"
								sh "mvn versions:commit"
						
							}
						}
					}		
			
			stage('Release Tag to SCM') {
				when {
							 branch 'master'
						 }
			    steps {
				echo 'clean test'
				script {
					def releasedVersion = getReleaseVersion()
					sh 'git status'
					sh 'git add -- pom.xml'
					sh "git commit -a -m 'Release${releasedVersion}'"
					sh "git tag -a ${releasedVersion} -m 'Addressbook-${releasedVersion}'"
					sh "git push https://tonysandeep:Qwerty0420@github.com/tonysandeep/multi-pipeline-test.git ${releasedVersion}"
				}

			    }
			}
			
			stage('Sanity Test') {
				when {
							 branch 'master'
						 }
			    steps {
			    script{
				echo 'clean test'
				def releasedVersion = getReleaseVersion()
					checkout([  
						$class: 'GitSCM', 
						branches: [[name: "refs/tags/${releasedVersion}"]], 
						doGenerateSubmoduleConfigurations: false, 
						extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'release']], 
						submoduleCfg: [], 
						userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/tonysandeep/multi-pipeline-test.git']]
					])
					dir('release'){
						sh 'mvn clean test install'
					}	
				}
			    }
			}
        
			stage("Create RELEASE Package") {
					when {
							 branch 'master'
						 }
					steps {
					script {
						dir('release') { 	
							def releasedVersion = getReleaseVersion()
						
							sh "sed -i 's/{{PACKAGE_VERSION}}/${releasedVersion}.0/g' deployit-manifest.xml"
							sh "sed -i 's/{{Deploy-App}}/AddressBook-RELEASE/g' deployit-manifest.xml"
							xldCreatePackage artifactsPath: 'release/target', manifestPath: 'release/deployit-manifest.xml', darPath: "release/${releasedVersion}.0.dar" 
							}
						}
					}
			}
			stage('XLDeploy  Publish Release package') { 
				when {
							 branch 'master'
						 }
				steps {
					script {
					dir('release') {
						def releasedVersion = getReleaseVersion()
						xldPublishPackage serverCredentials: 'XLDeployServer', darPath: "${releasedVersion}.0.dar"
					}
					}
				}	
			}
			/*stage('UAT XL Release Deployment') { 
				when {
							 branch 'master'
						 }
				steps {
					script {
					dir('release') {
						
						def releasedVersion = getReleaseVersion()
			                        xlrCreateRelease releaseTitle: "Release for $BUILD_TAG", serverCredentials: 'XLReleaseServer', startRelease: true, template: 'Demo/ReleaseTemplate-1.0', variables: [[propertyName: 'Version', propertyValue: "${releasedVersion}.0"], [propertyName: 'Environment', propertyValue: 'UATTomcatEnv']]
						//xldDeploy serverCredentials: 'XLDeployServer', environmentId: 'Environments/QATomcatENv', packageId: "Applications/AddressBook-RELEASE/${releasedVersion}.0"
						}
					}
				}
			}*/
            
			
    }     
        
    tools {
        maven 'maven3.3.9'
        jdk 'openjdk8'
    }

    post {
         always {
            echo 'JENKINS PIPELINE'
	    
            

        }
        success {
            echo 'JENKINS PIPELINE SUCCESSFUL'
	    githubNotify description: "$BUILD_TAG $BRANCH_NAME $BUILD_URL",  status: 'SUCCESS'
        }
        failure {
            echo 'JENKINS PIPELINE FAILED'
	    githubNotify description: "$BUILD_TAG $BRANCH_NAME $BUILD_URL",  status: 'Failure'
        }
        unstable {
            echo 'JENKINS PIPELINE WAS MARKED AS UNSTABLE'
	    githubNotify description: "$BUILD_TAG $BRANCH_NAME $BUILD_URL",  status: 'ERROR'
        }
        changed {
            echo 'JENKINS PIPELINE STATUS HAS CHANGED SINCE LAST EXECUTION'
        }
    }

     
}
def getReleaseVersion() {
                        def pom = readMavenPom file: 'pom.xml'
                        print pom.version
                        def versionNumber;
                        versionNumber = env.BUILD_NUMBER;
                        print versionNumber
                        return pom.version.replace("-SNAPSHOT", ".${versionNumber}")
                    }
