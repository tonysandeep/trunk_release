pipeline {
    agent { label 'master' }
	//options { skipDefaultCheckout() }

		stage("Unit Test") {
					agent { label 'windows' }
					steps {
								cleanWs()
								echo ' Unit Test Stage'
								bat 'mvn test'
								junit 'target\\surefire-reports\\*.xml'	
						}
				}
	    			/*stage('Scanning for Security') {
					 when {
					 anyOf {
							branch 'dev'
							branch 'master'
						}
					 }
					 steps {
						fodStaticAssessment bsiToken: 'eyJ0ZW5hbnRJZCI6OTkyNCwidGVuYW50Q29kZSI6IkRYQ18xODAxX0ZNQV85MjY4ODYyMzciLCJyZWxlYXNlSWQiOjgyMTgyLCJwYXlsb2FkVHlwZSI6IkFOQUxZU0lTX1BBWUxPQUQiLCJhc3Nlc3NtZW50VHlwZUlkIjoxNCwidGVjaG5vbG9neVR5cGUiOiJKQVZBL0oyRUUiLCJ0ZWNobm9sb2d5VHlwZUlkIjo3LCJ0ZWNobm9sb2d5VmVyc2lvbiI6IjEuOCIsInRlY2hub2xvZ3lWZXJzaW9uSWQiOjEyLCJhdWRpdFByZWZlcmVuY2UiOiJBdXRvbWF0ZWQiLCJhdWRpdFByZWZlcmVuY2VJZCI6MiwiaW5jbHVkZVRoaXJkUGFydHkiOmZhbHNlLCJpbmNsdWRlT3BlblNvdXJjZUFuYWx5c2lzIjpmYWxzZSwicG9ydGFsVXJpIjoiaHR0cHM6Ly90cmlhbC5mb3J0aWZ5LmNvbS8iLCJhcGlVcmkiOiJodHRwczovL2FwaS50cmlhbC5mb3J0aWZ5LmNvbSIsInNjYW5QcmVmZXJlbmNlIjoiU3RhbmRhcmQiLCJzY2FuUHJlZmVyZW5jZUlkIjoxfQ==', entitlementPreference: 'SingleScanOnly', inProgressScanActionType: 'CancelInProgressScan', overrideGlobalConfig: true, personalAccessToken: 'fortifyondemand', remediationScanPreferenceType: 'RemediationScanIfAvailable', srcLocation: '.', tenantId: 'DXC_1801_FMA_926886237', username: 'tonisundhp@gmail.com'
						fodPollResults bsiToken: 'eyJ0ZW5hbnRJZCI6OTkyNCwidGVuYW50Q29kZSI6IkRYQ18xODAxX0ZNQV85MjY4ODYyMzciLCJyZWxlYXNlSWQiOjgyMTgyLCJwYXlsb2FkVHlwZSI6IkFOQUxZU0lTX1BBWUxPQUQiLCJhc3Nlc3NtZW50VHlwZUlkIjoxNCwidGVjaG5vbG9neVR5cGUiOiJKQVZBL0oyRUUiLCJ0ZWNobm9sb2d5VHlwZUlkIjo3LCJ0ZWNobm9sb2d5VmVyc2lvbiI6IjEuOCIsInRlY2hub2xvZ3lWZXJzaW9uSWQiOjEyLCJhdWRpdFByZWZlcmVuY2UiOiJBdXRvbWF0ZWQiLCJhdWRpdFByZWZlcmVuY2VJZCI6MiwiaW5jbHVkZVRoaXJkUGFydHkiOmZhbHNlLCJpbmNsdWRlT3BlblNvdXJjZUFuYWx5c2lzIjpmYWxzZSwicG9ydGFsVXJpIjoiaHR0cHM6Ly90cmlhbC5mb3J0aWZ5LmNvbS8iLCJhcGlVcmkiOiJodHRwczovL2FwaS50cmlhbC5mb3J0aWZ5LmNvbSIsInNjYW5QcmVmZXJlbmNlIjoiU3RhbmRhcmQiLCJzY2FuUHJlZmVyZW5jZUlkIjoxfQ==', overrideGlobalConfig: true, personalAccessToken: 'fortifyondemand', pollingInterval: 1, tenantId: 'DXC_1801_FMA_926886237', username: 'tonisundhp@gmail.com'
					}
				}*/
	    
				stage('Build and Package') {
					agent { label 'windows' }
						steps {
								echo 'Clean Build'
								sh "ls"
								sh "pwd"
								sh "mvn sonar:sonar clean compile package -Dtest=\\!TestRunner* -DfailIfNoTests=false -Dsonar.projectKey=CurdApp -Dsonar.host.url=http://10.62.125.9:8085/ -Dsonar.login=f16fabd2605044f38e79e4c0e4bc5f73c55dd144"
								 
						}
				}
				
				stage("XLDeploy Package") {
					agent { label 'windows' }
				steps {
					sh "sed -i 's/{{PACKAGE_VERSION}}/$BUILD_NUMBER/g' deployit-manifest.xml"
					sh "sed -i 's/{{Deploy-App}}/CurdApp/g' deployit-manifest.xml"
					xldCreatePackage artifactsPath: 'target', manifestPath: 'deployit-manifest.xml', darPath: "$BUILD_NUMBER.0.dar"
					
				}
			}
	    
	    		stage('XLDeploy Publish') {  
				agent { label 'windows' }
				steps {
					xldPublishPackage serverCredentials: 'XLDeployServer', darPath: "$BUILD_NUMBER.0.dar"
				}
			}
			
			/*stage('Request to Pull Changes') {
				  when {
					 		branch 'dev'
					 }
                		steps {

                        			sh "hub pull-request -m '${BUILD_TAG}' -b master -h dev"

               			 }

            		}*/
		     	
			/*stage('XL Release') {
				  when {
					 		branch 'dev'
					 }
				agent { label 'windows' }
                		steps {

                        	xlrCreateRelease releaseTitle: 'Release for $BUILD_TAG', serverCredentials: 'XLReleaseServer', startRelease: true, template: 'Demo/ReleaseTemplate-1.0', variables: [[propertyName: 'Version', propertyValue: "$BUILD_NUMBER.0"], [propertyName: 'Environment', propertyValue: 'QATomcatENv']]

               			 }

            		}*/

				/* stage('Test Automation') {
				 	 when {
					   not {
					 		branch 'master'
					    }
					 }
					steps {
									echo "test phase"
						}
					}*/
					
			stage("Test Repo checkout") {
			   agent { label 'windows' }
				when {
					branch 'QA'
					not {
					 		branch 'master'
					    }
					 }   
						steps {
							echo 'checkout web BDD' 
							checkout([  
								$class: 'GitSCM', 
								branches: [[name: 'refs/heads/master']], 
								doGenerateSubmoduleConfigurations: false, 
								extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'web']], 
								submoduleCfg: [], 
								userRemoteConfigs: [[credentialsId: 'rakeshgitvirtusatoken', url: 'https://git.virtusa.com/intelligent-automation/Addressbook_web_test.git']]
							])
							echo 'checkout API BDD'
							checkout([  
								$class: 'GitSCM', 
								branches: [[name: 'refs/heads/master']], 
								doGenerateSubmoduleConfigurations: false, 
								extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'api']], 
								submoduleCfg: [], 
								userRemoteConfigs: [[credentialsId: 'rakeshgitvirtusatoken', url: 'https://git.virtusa.com/intelligent-automation/ProductList_api_test.git']]
							])
							echo 'checkout Swing Desktop'
							checkout([  
								$class: 'GitSCM', 
								branches: [[name: 'refs/heads/master']], 
								doGenerateSubmoduleConfigurations: false, 
								extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'swing']], 
								submoduleCfg: [], 
								userRemoteConfigs: [[credentialsId: 'rakeshgitvirtusatoken', url: 'https://git.virtusa.com/intelligent-automation/Feedback_swing_test.git']]
							])
						} 
			}
		    	stage("API Smoke Test") {
				agent { label 'windows' }
				when {
					branch 'QA'
					not {
					 		branch 'master'
					    }
					 }
				steps {
					dir('api') {
							echo 'API smoke Testing Stage'
							step([$class: 'XrayExportBuilder', filePath: '\\src\\test\\java\\com\\virtusa\\qa\\api', issues: 'API-5', serverInstance: 'ce436e2b-0499-443c-9431-1864e5d99242'])
							catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
								bat 'mvn clean test -Dcucumber.options="--tags @smoke"'
                            				}					
							bat 'mkdir ..\\target\\cucumber-reports\\API-Smoke'
							bat 'copy target\\surefire-reports\\com.virtusa.qa.api.product.json ..\\target\\cucumber-reports\\API-Smoke\\API-smoke.json'
							step([$class: 'XrayImportBuilder', endpointName: '/cucumber/multipart',importInfo:'''{
									"fields": {
										"project": {
											"id": "10100"
										},
										"summary": "Smoke Api Test Execution for BDD (Generated By API Product ${BUILD_NUMBER})",
										"issuetype": {
											"id": "10007"
										},
								   "labels":["smoke","Jenkins","Api"],
										"customfield_10032" : [
										   "Dev"
										]
									}
								}''',inputInfoSwitcher:"fileContent",importFilePath: '\\target\\surefire-reports\\com.virtusa.qa.api.1_API-1.json', serverInstance: 'ce436e2b-0499-443c-9431-1864e5d99242'])

					}
				}
			}
			stage("Web Smoke Test") {
					agent { label 'windows' }
					when {
						branch 'QA'
					not {
					 		branch 'master'
					    }
					 }
						steps {
							dir('web') {
									echo 'WEB BDD Testing Stage'
									step([$class: 'XrayExportBuilder', filePath: '\\src\\test\\resource\\features', issues: 'AD-22', serverInstance: 'ce436e2b-0499-443c-9431-1864e5d99242'])
									catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
										bat 'mvn clean test -Dcucumber.options="--tags @smoke"'
                            						}
									bat 'mkdir ..\\target\\cucumber-reports\\Web-Smoke'
									bat 'copy target\\cucumber-reports\\Cucumber.json ..\\target\\cucumber-reports\\Web-Smoke\\Cucumber-smoke.json'
									step([$class: 'XrayImportBuilder', endpointName: '/cucumber/multipart',importInfo:'''{
										"fields": {
											"project": {
												"id": "10000"
											},
											"summary": "Smoke Web Test Execution for Addressbook BDD (Generated By ${BUILD_TAG})",
											"issuetype": {
												"id": "10007"
											},
									   "labels":["smoke","Jenkins"],
											"customfield_10032" : [
											   "Dev"
											]
										}
									}''',testExecKey:'AD-23',inputInfoSwitcher:"fileContent",importFilePath: '..\\target\\cucumber-reports\\Web-Smoke\\Cucumber-smoke.json', serverInstance: 'ce436e2b-0499-443c-9431-1864e5d99242'])												
							}
						
						}
			}
	    		stage("API Regression Test") {
				agent { label 'windows' }
				when {
					branch 'QA'
					not {
					 		branch 'master'
					    }
					 }
				steps {
					dir('api') {
						echo 'API API regression Testing Stage'
						catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
							bat 'mvn clean test -Dcucumber.options="--tags @regression"'
                            			}						
						bat 'mkdir ..\\target\\cucumber-reports\\API-Regression'
						bat 'copy target\\surefire-reports\\com.virtusa.qa.api.product.json ..\\target\\cucumber-reports\\API-Regression\\API-regression.json'
						step([$class: 'XrayImportBuilder', endpointName: '/cucumber/multipart',importInfo:'''{
										"fields": {
											"project": {
												"id": "10100"
											},
											"summary": "Regression Api Test Execution for BDD (Generated By ${BUILD_NUMBER})",
											"issuetype": {
												"id": "10007"
											},
									   "labels":["Regression","Jenkins","Api"],
											"customfield_10032" : [
											   "Dev"
											]
										}
									}''',inputInfoSwitcher:"fileContent",importFilePath: '\\target\\surefire-reports\\com.virtusa.qa.api.1_API-1.json', serverInstance: 'ce436e2b-0499-443c-9431-1864e5d99242'])

						bat 'del /f target\\surefire-reports\\com.virtusa.qa.api.product.json'
						bat 'del /f target\\surefire-reports\\com.virtusa.qa.api.1_API-1.json'
					}
				}
			}
			stage("Web Regression Test") {
				agent { label 'windows' }
				when {
					branch 'QA'
					not {
					 		branch 'master'
					    }
					 }
				steps {
					dir('web') {
							echo 'Web regression Testing Stage'
							catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
								bat 'mvn test -Dcucumber.options="--tags @regression"'
                            				}							
						    	bat 'mkdir ..\\target\\cucumber-reports\\Web-Regression'
							bat 'copy target\\cucumber-reports\\Cucumber.json ..\\target\\cucumber-reports\\Web-Regression\\Cucumber-regression.json'
							bat 'del /f target\\cucumber-reports\\Cucumber.json'
							step([$class: 'XrayImportBuilder', endpointName: '/cucumber/multipart',importInfo:'''{
								"fields": {
									"project": {
										"id": "10000"
									},
									"summary": "Regression Web Test Execution for Addressbook BDD (Generated By ${BUILD_TAG})",
									"issuetype": {
										"id": "10007"
									},
							   "labels":["Regression","Jenkins"],
									"customfield_10032" : [
									   "Dev"
									]
								}
							}''',inputInfoSwitcher:"fileContent",importFilePath: '..\\target\\cucumber-reports\\Web-Regression\\Cucumber-regression.json', serverInstance: 'ce436e2b-0499-443c-9431-1864e5d99242'])
					}
				}
				post {
							always {
									allure results: [[path: 'web\\target\\allure-results']]

							}
				}
			}
			

			stage("Desktop Test") {
				agent { label 'windows' }
				when {
					branch 'QA'
					not {
					 		branch 'master'
					    }
					 }
				steps {
					dir('swing') {
						echo 'Testing Desktop'
					    	step([$class: 'XrayExportBuilder', filePath: '\\src\\test\\resource\\features', issues: 'SDA-5', serverInstance: 'ce436e2b-0499-443c-9431-1864e5d99242'])
						catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
							bat 'mvn clean test'
                           			}
						bat 'mkdir ..\\target\\cucumber-reports\\Desktop-Test'
						bat 'copy target\\cucumber-reports\\Cucumber.json ..\\target\\cucumber-reports\\Desktop-Test\\Cucumber-desktop.json'
						step([$class: 'XrayImportBuilder', endpointName: '/cucumber/multipart',importInfo:'''{
										"fields": {
											"project": {
												"id": "10101"
											},
											"summary": " Desktop App Test Execution for BDD (Generated By Swing ${BUILD_NUMBER})",
											"issuetype": {
												"id": "10007"
											},
									   "labels":["Desktop","Jenkins"],
											"customfield_10032" : [
											   "Dev"
											]
										}
									}''',inputInfoSwitcher:"fileContent",importFilePath: '..\\target\\cucumber-reports\\Desktop-Test\\Cucumber-desktop.json', serverInstance: 'ce436e2b-0499-443c-9431-1864e5d99242'])

						bat 'del /f target\\cucumber-reports\\Cucumber.json'

					}
				}
			}

			stage("Cucumber Report generation") {
				agent { label 'windows' }
				when {
					branch 'QA'
					not {
					 		branch 'master'
					    }
					 }
				steps {
					cucumber buildStatus: 'UNSTABLE',
						failedFeaturesNumber: 1,
						failedScenariosNumber: 1,
						skippedStepsNumber: 1,
						failedStepsNumber: 1,
						fileIncludePattern: '**/*.json',
						jsonReportDirectory: 'target\\cucumber-reports',
						sortingMethod: 'ALPHABETICAL',
						trendsLimit: 100   
				}
			post {
				always {
						hygieiaTestPublishStep buildStatus: "${currentBuild.currentResult}", testApplicationName: 'addressbook', testEnvironmentName: 'Dev', testFileNamePattern: 'Cucumber-smoke.json', testResultsDirectory: '\\target\\cucumber-reports\\Web-Smoke', testType: 'Functional'
						hygieiaTestPublishStep buildStatus: "${currentBuild.currentResult}", testApplicationName: 'addressbook', testEnvironmentName: 'Dev', testFileNamePattern: 'API-smoke.json', testResultsDirectory: '\\target\\cucumber-reports\\API-Smoke', testType: 'Functional'
						hygieiaTestPublishStep buildStatus: "${currentBuild.currentResult}", testApplicationName: 'addressbook', testEnvironmentName: 'Dev', testFileNamePattern: 'Cucumber-desktop.json', testResultsDirectory: '\\target\\cucumber-reports\\Desktop-Test', testType: 'Functional'
						hygieiaTestPublishStep buildStatus: "${currentBuild.currentResult}", testApplicationName: 'addressbook', testEnvironmentName: 'Dev', testFileNamePattern: 'Cucumber-regression.json', testResultsDirectory: '\\target\\cucumber-reports\\Web-Regression', testType: 'Functional'
						hygieiaTestPublishStep buildStatus: "${currentBuild.currentResult}", testApplicationName: 'addressbook', testEnvironmentName: 'Dev', testFileNamePattern: 'API-regression.json', testResultsDirectory: '\\target\\cucumber-reports\\API-Regression', testType: 'Functional'

					}
				}
			}     
		     

				/* stage('Release Approval') {
					 when {
					 branch 'master'
					 }
					steps {
						echo 'Confirm the deployment'
						echo "waiting for approval"
						timeout( time: 120, unit: "SECONDS" ){
						input 'Do you want to proceed to the Deployment?'
						//milestone 1
									}
						}
					} */

					stage('Staging Release version') {
						when {
							 branch 'master'
						 }						
					    steps {
							echo 'set version to Release'
						script{
								def releasedVersion = getReleaseVersion()
								print releasedVersion
								sh "mvn versions:set -DnewVersion=${releasedVersion}-RELEASE"
								echo "commit the release version"
								sh "mvn versions:commit"
						
							}
						}
					}		
			
			stage('Release Tag to SCM') {
				when {
							 branch 'master'
						 }
			    steps {
				echo 'clean test'
				script {
					def releasedVersion = getReleaseVersion()
					sh 'git status'
					sh 'git add -- pom.xml'
					sh "git commit -a -m 'Release${releasedVersion}'"
					sh "git tag -a ${releasedVersion} -m 'Addressbook-${releasedVersion}'"
					sh "git push https://tonysandeep:Qwerty0420@github.com/tonysandeep/multi-pipeline-test.git ${releasedVersion}"
				}

			    }
			}
			
			stage('Sanity Test') {
				when {
							 branch 'master'
						 }
			    steps {
			    script{
				echo 'clean test'
				def releasedVersion = getReleaseVersion()
					checkout([  
						$class: 'GitSCM', 
						branches: [[name: "refs/tags/${releasedVersion}"]], 
						doGenerateSubmoduleConfigurations: false, 
						extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'release']], 
						submoduleCfg: [], 
						userRemoteConfigs: [[credentialsId: '', url: 'https://github.com/tonysandeep/multi-pipeline-test.git']]
					])
					dir('release'){
						sh 'mvn clean test install'
					}	
				}
			    }
			}
        
			stage("Create RELEASE Package") {
					when {
							 branch 'master'
						 }
					steps {
					script {
						dir('release') { 	
							def releasedVersion = getReleaseVersion()
						
							sh "sed -i 's/{{PACKAGE_VERSION}}/${releasedVersion}.0/g' deployit-manifest.xml"
							sh "sed -i 's/{{Deploy-App}}/AddressBook-RELEASE/g' deployit-manifest.xml"
							xldCreatePackage artifactsPath: 'release/target', manifestPath: 'release/deployit-manifest.xml', darPath: "release/${releasedVersion}.0.dar" 
							}
						}
					}
			}
			stage('XLDeploy  Publish Release package') { 
				when {
							 branch 'master'
						 }
				steps {
					script {
					dir('release') {
						def releasedVersion = getReleaseVersion()
						xldPublishPackage serverCredentials: 'XLDeployServer', darPath: "${releasedVersion}.0.dar"
					}
					}
				}	
			}
			/*stage('UAT XL Release Deployment') { 
				when {
							 branch 'master'
						 }
				steps {
					script {
					dir('release') {
						
						def releasedVersion = getReleaseVersion()
			                        xlrCreateRelease releaseTitle: "Release for $BUILD_TAG", serverCredentials: 'XLReleaseServer', startRelease: true, template: 'Demo/ReleaseTemplate-1.0', variables: [[propertyName: 'Version', propertyValue: "${releasedVersion}.0"], [propertyName: 'Environment', propertyValue: 'UATTomcatEnv']]
						//xldDeploy serverCredentials: 'XLDeployServer', environmentId: 'Environments/QATomcatENv', packageId: "Applications/AddressBook-RELEASE/${releasedVersion}.0"
						}
					}
				}
			}*/
            
			
    }     
        
    tools {
        maven 'maven3.3.9'
        jdk 'openjdk8'
    }

    post {
         always {
            echo 'JENKINS PIPELINE'
            

        }
        success {
            echo 'JENKINS PIPELINE SUCCESSFUL'
        }
        failure {
            echo 'JENKINS PIPELINE FAILED'
        }
        unstable {
            echo 'JENKINS PIPELINE WAS MARKED AS UNSTABLE'
        }
        changed {
            echo 'JENKINS PIPELINE STATUS HAS CHANGED SINCE LAST EXECUTION'
        }
    }

     
}
def getReleaseVersion() {
                        def pom = readMavenPom file: 'pom.xml'
                        print pom.version
                        def versionNumber;
                        versionNumber = env.BUILD_NUMBER;
                        print versionNumber
                        return pom.version.replace("-SNAPSHOT", ".${versionNumber}")
                    }
